(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{430:function(s,t,a){"use strict";a.r(t);var n=a(2),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h3",{attrs:{id:"go泛型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#go泛型"}},[s._v("#")]),s._v(" Go泛型")]),s._v(" "),t("p",[s._v("大家都知道，在"),t("code",[s._v("go1.18")]),s._v(" 中支持了泛型。")]),s._v(" "),t("p",[s._v("正好我最近在做一个新的项目，想着能不能简单地"),t("code",[s._v("试用一下")]),s._v(" ，于是我打算从gorm下手，开始编写一个支持泛型的单表curd。")]),s._v(" "),t("h3",{attrs:{id:"传统模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#传统模式"}},[s._v("#")]),s._v(" 传统模式")]),s._v(" "),t("p",[s._v("在有泛型之前，我们写单表的crud都是定义一个model，接着在每个model结构体中定义对应的select/update/delete等方法。虽然可以二次封装gorm的基础方法，但每个model都需要额外定义这些方法，显得比较麻烦。")]),s._v(" "),t("p",[s._v("当然也有可能是我姿势不对，没摸清楚"),t("code",[s._v("门路")]),s._v(" 。")]),s._v(" "),t("h3",{attrs:{id:"泛型模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型模式"}},[s._v("#")]),s._v(" 泛型模式")]),s._v(" "),t("p",[s._v("用过MybatisPlus的都知道，通过定义一个集成自基础Mapper的Mapper比如"),t("code",[s._v("UserMapper")]),s._v(" ，我们就可以拥有Mapper对象的所有基础CRUD方法，这对我来说太诱人（太方便了），加上Spring的自动注入，导致编写一个CRUD方法十分方便。")]),s._v(" "),t("p",[s._v("有了这个参考，我打算也在go里面尝试一下类似的模式。")]),s._v(" "),t("p",[s._v("那关于泛型的介绍，我就不多说了。大家可以看看其他的文章~")]),s._v(" "),t("h4",{attrs:{id:"定义mapper"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义mapper"}},[s._v("#")]),s._v(" 定义Mapper")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" Curd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("T any"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("这里用any类型是为了通用，可能定义的model使用了gorm.Model，但它毕竟不是gorm.Model类型，所以这里用不了gorm.Model。这里也是可以用接口类型的，如果要取出结构体的字段，这时候就可以定义以下这种接口：")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" IModel "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("GetId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h4",{attrs:{id:"实现最基本的selectbyid方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现最基本的selectbyid方法"}},[s._v("#")]),s._v(" 实现最基本的SelectById方法")]),s._v(" "),t("p",[s._v("这里以通过主键查询数据为例，我们写一个最基本的查询相关方法:")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("Curd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("SelectById")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("error")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" t T\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" err "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" conn"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Model")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Find")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"id = ?"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Error"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" err "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" err "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" gorm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ErrRecordNotFound "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" err\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("这里我写的比较朴素，首先定义一个T类型结构体的数据，接着根据id查找到对应的数据t，最后根据是否有err，决定是否返回这个结构体的指针。")]),s._v(" "),t("p",[t("code",[s._v("好处是：查询不到数据的时候，不会返回空结构体，而是nil，序列化为JSON以后，不会出现一个空的结构体，而是nil")])]),s._v(" "),t("h4",{attrs:{id:"再试下create"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#再试下create"}},[s._v("#")]),s._v(" 再试下Create")]),s._v(" "),t("p",[s._v("我们再来编写一个Create方法:")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("Curd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Insert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("model "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("error")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" conn"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Model")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("model"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Create")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("model"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Error\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h2",{attrs:{id:"这个就更赖皮了-直接通过传入的方法添加数据-几乎没有二次处理。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#这个就更赖皮了-直接通过传入的方法添加数据-几乎没有二次处理。"}},[s._v("#")]),s._v(" 这个就更赖皮了，直接通过传入的方法添加数据，几乎没有二次处理。")]),s._v(" "),t("p",[s._v('上述的"Mapper"就已经有了添加/查询功能，我们来简单尝试下。')]),s._v(" "),t("h4",{attrs:{id:"定义user"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义user"}},[s._v("#")]),s._v(" 定义User")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" model\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"github.com/jinzhu/gorm"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" User "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\tgorm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Model\n\tName "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('`json:"name" gorm:"type:varchar(12)"`')]),s._v("\n\tFrom "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('`json:"from" gorm:"type:varchar(12)"`')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h4",{attrs:{id:"添加dao结构体"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#添加dao结构体"}},[s._v("#")]),s._v(" 添加dao结构体")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" UserDao "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\tmapper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Curd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("model"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("User"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h4",{attrs:{id:"测试一下"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#测试一下"}},[s._v("#")]),s._v(" 测试一下")]),s._v(" "),t("p",[s._v("dao特别简单，通过组合Curd[model]结构体即可。这样UserDao就能使用Curd的Select和Create方法了，我们来试试吧！")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://files.mdnice.com/user/11504/a4c836dd-ba08-4cad-a2c4-485470f23d35.png",alt:""}})]),s._v(" "),t("p",[s._v("这里我们调用了Insert方法，插入了一个User。（上面的迁移语句可以忽略，因为我本地环境是剥离版的）")]),s._v(" "),t("p",[s._v("可以看到，没有报错，我们去数据库检查下数据:")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://files.mdnice.com/user/11504/d542a3a5-c3a2-4223-a32a-bd8c0191c612.png",alt:""}})]),s._v(" "),t("p",[s._v("接着我们执行下select方法:")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://files.mdnice.com/user/11504/02e43976-b231-4499-a716-2f7b8a5b2c43.png",alt:""}})]),s._v(" "),t("p",[s._v("接着我们执行下Select，因为刚才插入的数据id为1，所以我查询了id为1和33的数据，可以看到2个结果分别为"),t("code",[s._v("数据")]),s._v("和nil，也就是说查询也ok了。")]),s._v(" "),t("p",[s._v("但是其实我们并没有为UserDao编写对应的查询/插入方法，却获得了这些方法，这也许就是泛型的"),t("code",[s._v("魅力")]),s._v("吧。")]),s._v(" "),t("p",[s._v("今天的内容就先介绍到这里，感兴趣的小伙伴可以自己实现"),t("code",[s._v("完整的代码")]),s._v("哟。")])])}),[],!1,null,null,null);t.default=e.exports}}]);