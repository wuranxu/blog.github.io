(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{436:function(t,_,v){"use strict";v.r(_);var e=v(2),s=Object(e.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h3",{attrs:{id:"最后一篇关于fastapi的内容"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#最后一篇关于fastapi的内容"}},[t._v("#")]),t._v(" 最后一篇关于FastApi的内容")]),t._v(" "),_("h2",{attrs:{id:"感想"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#感想"}},[t._v("#")]),t._v(" 感想")]),t._v(" "),_("p",[t._v("上一篇写到了迁移"),_("code",[t._v("Flask")]),t._v("到"),_("code",[t._v("FastApi")]),t._v("的注意事项，其实直到现在我都还不算真正使用过FastApi，也许我也没有资格写这种评价类的文章。不过我还是想说点感想:")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("FastApi的一些资料还不是很成熟，不如Flask和Django的资料那么多。")]),t._v(" "),_("p",[t._v("所以，"),_("code",[t._v("不建议没有Flask或者Django或者其他web框架使用经验的用户第一时间上手FastApi")]),t._v("。因为遇到问题会比较难解决，能查到的资料相对有限。")])]),t._v(" "),_("li",[_("p",[t._v("FastApi属于比较限制的框架，在某些地方控制得比较死，比如接口参数那里。下面我会说到。")])])]),t._v(" "),_("h2",{attrs:{id:"烦恼"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#烦恼"}},[t._v("#")]),t._v(" 烦恼")]),t._v(" "),_("p",[t._v("其实我今天抽空在研究"),_("code",[t._v("@permission")]),t._v("装饰器的替代方案，之前是通过修改接口的参数，通过装饰器注入参数到"),_("code",[t._v("kwargs")]),t._v("的方式，获取到用户信息。")]),t._v(" "),_("p",[t._v("但是现在有个问题是，FastApi"),_("code",[t._v("严格控制了你的接口参数")]),t._v("，如果改变接口的参数，FastApi内部会直接跑出"),_("code",[t._v("参数错误")]),t._v("的异常。这就很让人苦恼，于是我开始研究其他的方式:")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("实现login_required并不一定需要"),_("code",[t._v("装饰器")])]),t._v(" "),_("p",[t._v("业内实现"),_("code",[t._v("判断用户是否登录")]),t._v("的方法，包括FastApi推荐的也都是: 用"),_("code",[t._v("中间件")]),t._v("结合Request上下文来实现的。一直以来都是我野路子了，具体的做法我这里就不详说了，大概意思是一个HTTP请求分为很多个阶段。")]),t._v(" "),_("p",[t._v("画个草图:")])])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://static.pity.fun/picture/2021-5-6/1620313385061-image.png",alt:""}})]),t._v(" "),_("p",[t._v("在这些过程中，会遇到很多个"),_("code",[t._v("Context")]),t._v("，比如咱们的登录状态就应该放到请求之前去做。如果校验通过，则"),_("code",[t._v("调用下一个context")]),t._v("，失败则直接返回RESPONSE。")]),t._v(" "),_("p",[t._v("用Flask类比的话就是@app.after_request()和@app.before_request()，这个都是我印象中的，我没有深入去使用到。放到FastApi里面就是以middleware的形式。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://static.pity.fun/picture/2021-5-6/1620314197210-image.png",alt:""}})]),t._v(" "),_("p",[_("strong",[t._v("但是我不考虑这种做法，第一是太局限了，基本上会给诸多接口都加上登录的限制，第二是没有对具体的用户权限进行整合，比如有的接口我希望管理员访问，有的接口希望普通用户就能访问。这种情况下，我还是打算采用别的方法。")])]),t._v(" "),_("ul",[_("li",[t._v("Depends")])]),t._v(" "),_("p",[t._v("其实在之前蓝图模块就有看到过这货，只不过不太清楚他是干嘛的。其实它实现的功能和上面的差不多，也是可以调整接口请求的参数。")]),t._v(" "),_("p",[t._v("Depends会去帮你处理请求参数里的信息，基本上它是这么用的:")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://static.pity.fun/picture/2021-5-6/1620314976510-image.png",alt:""}})]),t._v(" "),_("p",[t._v("这就是，我要的"),_("code",[t._v("滑板鞋")]),t._v("!现在问题就可以拆解为，读取request headers里的token字段，然后判断token是否过期等等。最后转换成用户信息，return出来~期间遇到"),_("strong",[t._v("异常")]),t._v("，就返回对应的异常即可。")]),t._v(" "),_("h3",{attrs:{id:"最终的用法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#最终的用法"}},[t._v("#")]),t._v(" 最终的用法")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://static.pity.fun/picture/2021-5-6/1620315092183-image.png",alt:""}})]),t._v(" "),_("h3",{attrs:{id:"遇到参数问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#遇到参数问题"}},[t._v("#")]),t._v(" 遇到参数问题")]),t._v(" "),_("p",[t._v("Depends接受的其实是一个"),_("code",[t._v("函数")]),t._v("，说是函数，但是它是根据对象是否实现了__call__方法来判断的，Depends相当于是在请求执行之前调用了Depends里面传递的方法，所以我们编写一个Permission类，实现__call__即可。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://static.pity.fun/picture/2021-5-6/1620315487190-image.png",alt:""}})]),t._v(" "),_("ul",[_("li",[_("p",[t._v("__init__方法")]),t._v(" "),_("p",[t._v("初始化把role的权限值赋给self.role")])]),t._v(" "),_("li",[_("p",[t._v("__call__方法")]),t._v(" "),_("p",[t._v("逻辑和之前的permission类似，先判断token是否为空，这边封装了2个exception，分别是认证失败和权限失败。")])])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://static.pity.fun/picture/2021-5-6/1620315525258-image.png",alt:""}})]),t._v(" "),_("p",[t._v("异常代码，继承了HTTPException。因为FastApi提供了全局"),_("code",[t._v("监听")]),t._v("Exception的方法，方便你处理自定义的异常，所以这就是我们封装自定义异常的原因。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://static.pity.fun/picture/2021-5-6/1620315610520-image.png",alt:""}})]),t._v(" "),_("p",[t._v("封装好的异常，通过@pity.exception_handler控制异常具体的输出，当是"),_("code",[t._v("PermissionException")]),t._v("或"),_("code",[t._v("AuthException")]),t._v("的时候输出对应的内容。")]),t._v(" "),_("h2",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),_("p",[t._v("来个首尾呼应吧，其实写到这里，我自己都一脸懵逼。这也就是我发现FastApi的一大问题，并不是它有问题，而是我有问题！有的东西我"),_("code",[t._v("并不会用")]),t._v("，没有的东西，还得自己写！所以也就对应了我之前说，为什么不建议大家没有基础的去挑战这个框架，这个框架它是20级的boss，新手村出来的伙计还是先别打了！")]),t._v(" "),_("p",[t._v("后续虽还是继续使用这个框架，但对于他独特的地方我就不深入去研究了，"),_("code",[t._v("虽然自己写插件这种形式很能锻炼人，但是那自己写插件我要你这个框架干啥呢？所以合适的地方用合适的武器，不能大炮打蚊子，也不能杀鸡用牛刀。")])]),t._v(" "),_("p",[t._v("抓紧10分钟来篇"),_("code",[t._v("水文")]),t._v("才是王道。")])])}),[],!1,null,null,null);_.default=s.exports}}]);