(window.webpackJsonp=window.webpackJsonp||[]).push([[195],{607:function(t,s,a){"use strict";a.r(s);var e=a(2),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("blockquote",[s("p",[t._v("大家好~我是"),s("code",[t._v("米洛")]),t._v("！"),s("br"),t._v("\n我正在从0到1打造一个开源的接口测试平台, 也在编写一套与之对应的"),s("code",[t._v("教程")]),t._v("，希望大家多多支持。"),s("br"),t._v("\n欢迎关注我的公众号"),s("code",[t._v("米洛的测开日记")]),t._v("，获取最新文章教程!")])]),t._v(" "),s("h3",{attrs:{id:"回顾"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#回顾"}},[t._v("#")]),t._v(" 回顾")]),t._v(" "),s("p",[t._v("上一节我们构思了一下怎么去支持Python脚本，在和@joker讨论以后，考虑到python脚本不会太复杂，所以我们这一节我们就先实现"),s("code",[t._v("exec")]),t._v("的版本。")]),t._v(" "),s("h3",{attrs:{id:"exec初体验"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exec初体验"}},[t._v("#")]),t._v(" exec初体验")]),t._v(" "),s("p",[t._v("exec是一个比较厉害的"),s("code",[t._v("内置库")]),t._v("，它为想要执行python代码的用户提供了便利，与之对应的还有execfile版本，这个是文件版本的exec，也就是说，他接受的参数从一段代码变成了一个指定的"),s("code",[t._v("文件")]),t._v("。")]),t._v(" "),s("p",[t._v("上一节我们似乎介绍了exec的普通用法，那今天我们就讲讲怎么通过exec拿到对应的执行结果，毕竟对于执行结果我们是会渴望能拿到的。")]),t._v(" "),s("ul",[s("li",[t._v("实现第一个python方法: "),s("strong",[t._v("获取本月第一天的日期")])])]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" datetime "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" datetime\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_first_day_of_month")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 把day指定为01，肯定就是第一天啦")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" datetime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("today"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("strftime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%Y-%m-01"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("python代码是如此编写的，那exec里面我们怎么拿到这个方法的结果呢？")]),t._v(" "),s("p",[s("strong",[t._v("首先呢，exec是没用返回值的。我们只能通过，在exec执行的代码块里面定义变量去接收返回值。")])]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" datetime "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" datetime\n\n\nreturn_value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" datetime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("today"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("strftime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%Y-%m-01"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("那么在我们的"),s("code",[t._v("后台代码")]),t._v("里面，就可以拿到return_value作为变量。")]),t._v(" "),s("p",[s("strong",[t._v("但我实际在fastapi的方法里面，发现是不生效的。会报return_value not defined，但是单个执行文件确实是可以。")])]),t._v(" "),s("p",[t._v("于是我采用了新的方法，定义一个dict，传给exec，这样exec里面用到的变量等信息，都会返回到dict里面。")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("command "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\nfrom datetime import datetime\n\n\nreturn_value = datetime.today().strftime("%Y-%m-01")\n"""')]),t._v("\nloc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("dict")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("command"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" loc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("loc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'return_value'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://static.pity.fun/picture/2021-12-5/1638715629263-image.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"编写在线执行exec接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编写在线执行exec接口"}},[t._v("#")]),t._v(" 编写在线执行exec接口")]),t._v(" "),s("p",[t._v("其实本身是不想提供这个接口的，因为大部分脚本都可以在本地测试后传上来，但想了下，有就有吧，对于os.remove这样危险的语句还是得禁止掉。")]),t._v(" "),s("p",[t._v("不过由于是演示，我就不禁止了。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.pity.fun/picture/2021-12-6/1638795646758-image.png",alt:""}})]),t._v(" "),s("p",[t._v("先看一张效果图，执行完成后会有数据返回。但一定要注意的是，如果想拿到返回值，必须要有:")]),t._v(" "),s("p",[s("code",[t._v("current_time = xxx")]),t._v("，并且把返回值设置为current_time。")]),t._v(" "),s("p",[t._v("为什么呢？因为exec本身是拿不到返回值的，如果你去exec语句里面定义一个变量:")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("current_time2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"234"')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("这样就能在loc里面取到返回值了，所以如果要求有返回值，则必须写上上述的python语句。")]),t._v(" "),s("p",[t._v("我们就是通过exec执行代码，定义变量为返回值，接着取出该变量的方式实现整个过程的。")]),t._v(" "),s("p",[t._v("来看下代码怎么写:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.pity.fun/picture/2021-12-6/1638797059230-image.png",alt:""}})]),t._v(" "),s("p",[t._v("和上文提到的一样，如果没有返回值的话，直接就是None了。")]),t._v(" "),s("h3",{attrs:{id:"编写python数据构造器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编写python数据构造器"}},[t._v("#")]),t._v(" 编写python数据构造器")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.pity.fun/picture/2021-12-6/1638797147469-image.png",alt:""}})]),t._v(" "),s("p",[t._v("和redis操作很相似，实现run方法，也是记录数据并拿到返回值。")]),t._v(" "),s("h3",{attrs:{id:"改写获取数据构造器的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#改写获取数据构造器的方法"}},[t._v("#")]),t._v(" 改写获取数据构造器的方法")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.pity.fun/picture/2021-12-6/1638797246596-image.png",alt:""}})]),t._v(" "),s("p",[t._v("新增Python类型，注意这里我把这些数字，0-3都放到了Config类里面。")]),t._v(" "),s("p",[s("strong",[t._v("提醒一下各位，比如我这里的方法没有给出对应的文件路径，大家可以全局搜索，找到之。")])]),t._v(" "),s("p",[t._v("对应Config.py也增加了这样的子类。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.pity.fun/picture/2021-12-6/1638797327374-image.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"前端部分的改动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前端部分的改动"}},[t._v("#")]),t._v(" 前端部分的改动")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.pity.fun/picture/2021-12-6/1638798617834-image.png",alt:""}})]),t._v(" "),s("p",[t._v("页面基本是沿用的Redis的部分，在外部也稍微改造了一下:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.pity.fun/picture/2021-12-6/1638802011046-image.png",alt:""}})]),t._v(" "),s("h2",{attrs:{id:"改用开关的形式-看起来更直观。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#改用开关的形式-看起来更直观。"}},[t._v("#")]),t._v(" 改用开关的形式，看起来更直观。")]),t._v(" "),s("p",[t._v("今天的内容就介绍到这里了，欢迎大家积极提出建议，一起打造一款开源工具。")])])}),[],!1,null,null,null);s.default=n.exports}}]);