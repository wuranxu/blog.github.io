(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{473:function(s,t,a){"use strict";a.r(t);var n=a(2),r=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("blockquote",[t("p",[s._v("大家好~我是"),t("code",[s._v("米洛")]),s._v("！"),t("br"),s._v("\n我正在从0到1打造一个开源的接口测试平台, 也在编写一套与之对应的"),t("code",[s._v("教程")]),s._v("，希望大家多多支持。"),t("br"),s._v("\n欢迎关注我的公众号"),t("code",[s._v("米洛的测开日记")]),s._v("，获取最新文章教程!")])]),s._v(" "),t("h3",{attrs:{id:"回顾"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#回顾"}},[s._v("#")]),s._v(" 回顾")]),s._v(" "),t("p",[s._v("上节我们"),t("code",[s._v("憋")]),s._v("出了消息中心相关的内容，质量较低，希望各位轻拍。今天我们来聊聊对于grpc支持的事情。")]),s._v(" "),t("h3",{attrs:{id:"为什么要支持grpc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么要支持grpc"}},[s._v("#")]),s._v(" 为什么要支持grpc")]),s._v(" "),t("p",[s._v("随着postman在新版本已经支持了"),t("code",[s._v("GRPC")]),s._v('协议的接口调试功能，很多测试开发工程师表示可以"抄"起来了。由于之前公司有用到grpc，所以我在测试平台的设计之初就考虑过如何支持grpc协议的接口测试。为此我也调研，尝试了许多相关的工具。')]),s._v(" "),t("h3",{attrs:{id:"痛难点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#痛难点"}},[s._v("#")]),s._v(" 痛难点")]),s._v(" "),t("p",[s._v("grpc最大的痛点我觉得有以下几个，如果都能"),t("code",[s._v("完美支持")]),s._v("的话，那将会是一款很好用的调试工具。下面我将一一介绍这些痛难点。")]),s._v(" "),t("ol",[t("li",[s._v("参考资料少之又少")])]),s._v(" "),t("p",[s._v("其实业内基于grpc实现的开源项目有不少，比如"),t("code",[s._v("etcd")]),s._v("就是，但讲实话，可以参考的例子还真不多。以官网为例的话，grpc作为一款开源的rpc框架，官方文档"),t("code",[s._v("更多的")]),s._v("介绍是在于"),t("code",[s._v("如何用各种语言")]),s._v("实现一个grpc的demo。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://static.pity.fun/picture/2022-2-6/1644126205052-image.png",alt:"我们从官网的首页就可以看出，多语言的支持，是grpc的一个很大的卖点"}})]),s._v(" "),t("p",[s._v("比如我现在使用Python，进去看官网，都是比较简单的例子，有经典的hello项目，也有稍微进阶一点的stream。但无外乎都是那种demo代码，能跑，但是用于生产还"),t("code",[s._v("差点火候")]),s._v("。")]),s._v(" "),t("p",[s._v("总结下来便是，资料少之又少，企业内部的实现五花八门，有改protoc插件，有用类似grpc-gateway实现的，但我们好像连个参考的方式都没有。")]),s._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[s._v("调用方式局限")])]),s._v(" "),t("p",[s._v("以Python语言为例，我们如果想要去调用一个"),t("code",[s._v("grpc")]),s._v("的方法，我们必须得拿到proto文件，并编译为pb文件，当然也可以只要编译好的pb文件，再根据pb里面的Client建立stub实例，以我上篇<<grpc从入门到放弃>>的demo代码为例:")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" grpc\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" hello_pb2\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" hello_pb2_grpc "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" HelloStub\n\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 建立channel")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" grpc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("insecure_channel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'localhost:50051'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" channel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取到hello服务")]),s._v("\n        stub "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" HelloStub"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("channel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 新建request请求数据")]),s._v("\n        request "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" hello_pb2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("data"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"米洛"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 调用hi方法")]),s._v("\n        response "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" stub"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("hi"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 打印返回的信息")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Greeter client received: "')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" response"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("message"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" __name__ "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'__main__'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    run"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br")])]),t("p",[s._v("不难看出，我们需要先引入"),t("code",[s._v("HelloStub")]),s._v("才能调用对应的方法。那问题来了，如果我接口多，拆分的服务也多，不同语种编写的方法也多，如果用Python调用go的服务端，那岂不是要让go的服务用python-grpc相关的protoc编译出stub，再进行调用？")]),s._v(" "),t("p",[s._v("那万一你用的是别人的服务，就会产生各种各样的问题（这些官网不知道找到没有，但我好像没发现相关的demo）。")]),s._v(" "),t("p",[s._v("总结下来，这样的方式是行不通的，但我似乎听说有部分公司要测试grpc接口的时候，会上传一个protoc的文件，进而生成对应的"),t("code",[s._v("调用页面")]),s._v("或给出对应的调试方式。")]),s._v(" "),t("p",[t("strong",[s._v("当然这块内容也是有解决方法的，稍微我们会说到。")])]),s._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[s._v("负载均衡相关")])]),s._v(" "),t("p",[s._v("现在是微服务时代，我们的grpc服务肯定也是"),t("code",[s._v("多节点部署")]),s._v("的。不同的公司采用的服务注册发现的工具肯定都不太一样，有zk/etcd/nacos/consul等。但grpc似乎只提供了很普通的负载均衡算法（robin），甚至这块的资料都特少（反正我是没太找到）。")]),s._v(" "),t("p",[s._v("以我之前公司为例，我们用的是zk管理服务注册与发现，测试平台为了支持grpc的调用，我们根据appid找到zk里面活跃的节点，并返回对应的机器ip和端口，而zk里面也有服务的接口相关信息等数据，会一并拉取下来。")]),s._v(" "),t("h2",{attrs:{id:"但ip是变化的-不过企业内部会对服务有个group的区别-我们选择一般不会直接选ip-而是选group1或者group2-但这样一旦group1和2有故障-比如服务在发布-那就不太友好-所以还没完善的是智能选择服务可用的节点。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#但ip是变化的-不过企业内部会对服务有个group的区别-我们选择一般不会直接选ip-而是选group1或者group2-但这样一旦group1和2有故障-比如服务在发布-那就不太友好-所以还没完善的是智能选择服务可用的节点。"}},[s._v("#")]),s._v(" "),t("strong",[s._v("但ip是变化的，不过企业内部会对服务有个group的区别，我们选择一般不会直接选ip，而是选group1或者group2，但这样一旦group1和2有故障（比如服务在发布）那就不太友好，所以还没完善的是智能选择服务可用的节点。")])]),s._v(" "),t("p",[s._v("这样看来的话，作为一个测试工具，我们"),t("code",[s._v("只用考虑")]),s._v('解决"grpc必须通过stub去调用"的问题就行了。由于篇幅有限。那我们下一节继续讲这块内容，目标是测试平台能够像使用http一样测试grpc接口。做到和类似postman一样的效果即可，当然如果要通用一点，我们可以配置zk/etcd等注册中心的地址，并配置节点路径，完成自动获取ip，智能调用等功能。')]),s._v(" "),t("p",[s._v("下节关键字: "),t("code",[s._v("grpc_reflection")])])])}),[],!1,null,null,null);t.default=r.exports}}]);