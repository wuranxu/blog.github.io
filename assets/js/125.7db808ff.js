(window.webpackJsonp=window.webpackJsonp||[]).push([[125],{528:function(t,a,s){"use strict";s.r(a);var e=s(2),_=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("大家618好呀！")])]),t._v(" "),a("p",[t._v("这个系列好像更新进度很慢了，最近主要以水文为主。今天天气比较差，打算来点干货。恰巧饭哥也在"),a("code",[t._v("坐台")]),t._v("(坐在讲台)，所以我就不客气了！")]),t._v(" "),a("h3",{attrs:{id:"编写环境管理页面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写环境管理页面"}},[t._v("#")]),t._v(" 编写环境管理页面")]),t._v(" "),a("p",[t._v("之前的篇幅里面说过，用例"),a("code",[t._v("没有根据环境")]),t._v("去划分它的归属，其实这样也是不太合理的，毕竟不同的环境需要的数据可能不一致，并不一定能编写完全通用的用例。所以今天我打算从这个页面下手，"),a("code",[t._v("手把手")]),t._v("教大家编写一个完整的CRUD功能(带前端+联调)。后面前端的部分，如果大家不感兴趣的话，只看"),a("code",[t._v("后端")]),t._v("就好了。因为会有一系列的截图！看完不说半条命，那半小时肯定没了。")]),t._v(" "),a("p",[t._v("有的人可能不理解，环境不就是那几套吗？测试/预发/线上等等。是的，但是各个公司会叫不同的名字，所以我们为了制作一款大众且通用的工具，所以提供他们维护自己环境的功能。")]),t._v(" "),a("h2",{attrs:{id:"crud-curd是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#crud-curd是什么"}},[t._v("#")]),t._v(" CRUD/CURD是什么")]),t._v(" "),a("p",[t._v("经常逛"),a("code",[t._v("脉脉")]),t._v("的同学肯定都知道，经常能看到CURD CRUD CRUD boy这样的词汇。直白点说，curd指的就是增删改查，我们今天的内容就是这个，且听我一一道来。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("增")]),t._v(" "),a("p",[t._v("公司最近开了一个新的环境：fat2，我们系统得维护起来，所以我们需要新增一条"),a("code",[t._v("fat2")]),t._v("环境的数据。")])]),t._v(" "),a("li",[a("p",[t._v("删")]),t._v(" "),a("p",[t._v("公司又不用这个环境了，想去掉这个环境，免得混淆视听。")])]),t._v(" "),a("li",[a("p",[t._v("改")]),t._v(" "),a("p",[t._v("fat2环境公司觉得不好听，公司决定改成fat-beta。")])]),t._v(" "),a("li",[a("p",[t._v("查")]),t._v(" "),a("p",[t._v("公司现在有100多种环境，太多了，需要查询是否有fat77这个环境。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("没错，其实很多开发做的功能都与这个接近。大部分时间都是在做一些crud的工作。上述是细化到我们这一次环境管理的功能点，如果你觉得难的话，耐心看完（抄完）你就不会觉得难了。")])])]),t._v(" "),a("h2",{attrs:{id:"明确思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#明确思路"}},[t._v("#")]),t._v(" 明确思路")]),t._v(" "),a("p",[t._v("首先我们先要搞清楚本次需求，其实需求很简单，就是想给用户提供自定义环境名的功能。那么我们是不是在数据库需要存储这些"),a("code",[t._v("环境")]),t._v("的信息。最基本的信息需要哪些呢？我这里列一下:")]),t._v(" "),a("h3",{attrs:{id:"数据表准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据表准备"}},[t._v("#")]),t._v(" 数据表准备")]),t._v(" "),a("p",[t._v("核心字段:")]),t._v(" "),a("ul",[a("li",[t._v("环境名称")])]),t._v(" "),a("p",[t._v("比如fat uat pro (是否能重复？那肯定是不能重复的呀！)")]),t._v(" "),a("ul",[a("li",[t._v("环境备注")])]),t._v(" "),a("p",[t._v("比如fat是测试环境啥的啥的，其实也可以不要，但是给你一个选项，万一你需要添加一些说明呢")]),t._v(" "),a("p",[t._v("基本字段:")]),t._v(" "),a("ul",[a("li",[t._v("创建人是谁")]),t._v(" "),a("li",[t._v("修改人是谁")]),t._v(" "),a("li",[t._v("什么时候创建的")]),t._v(" "),a("li",[t._v("什么时候更新的")]),t._v(" "),a("li",[t._v("被删除了木有")])]),t._v(" "),a("h3",{attrs:{id:"功能需求准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#功能需求准备"}},[t._v("#")]),t._v(" 功能需求准备")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("环境可以通过名字模糊查询")])]),t._v(" "),a("li",[a("p",[t._v("可以编辑，编辑后会更新编辑时间")])]),t._v(" "),a("li",[a("p",[t._v("可以添加")])]),t._v(" "),a("li",[a("p",[t._v("可以删除")]),t._v(" "),a("p",[t._v("功能一拆分，是不是特别简单了，其实需求没多少，后端可能1小时不到就搞定了，前端还是费时间的。")])])]),t._v(" "),a("h2",{attrs:{id:"开始行动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开始行动"}},[t._v("#")]),t._v(" 开始行动")]),t._v(" "),a("h3",{attrs:{id:"定义model"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义model"}},[t._v("#")]),t._v(" 定义model")]),t._v(" "),a("p",[t._v("既然表的字段不多，数据也不复杂，那么我们可以先定义model。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://static.pity.fun/picture/2021-6-19/1624082614246-image.png",alt:""}})]),t._v(" "),a("p",[t._v("内容不难，熟悉sqlalchemy就更轻松了。目的是为了"),a("code",[t._v("映射一个数据表(环境表)的类")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("tablename")]),t._v(" 表示当前class对应的数据库表名，我们这里为了区分，统一加上"),a("code",[t._v("pity_")]),t._v("前缀。\n后面的内容就是对字段的定义以及初始化类。")]),t._v(" "),a("h3",{attrs:{id:"生成model"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生成model"}},[t._v("#")]),t._v(" 生成model")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://static.pity.fun/picture/2021-6-19/1624082831481-image.png",alt:""}})]),t._v(" "),a("p",[t._v("为了能自动生成数据表，我们需要在dao/"),a("strong",[t._v("init")]),t._v(".py里面import这个model类。")]),t._v(" "),a("h3",{attrs:{id:"定义pydantic的schema"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义pydantic的schema"}},[t._v("#")]),t._v(" 定义Pydantic的schema")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://static.pity.fun/picture/2021-6-19/1624082900414-image.png",alt:""}})]),t._v(" "),a("p",[t._v("这一步的目的很简单，就是为了做参数校验，比如有的哥们很坏，他创建环境的时候，直接给你来个空字符串或者空格字符串的"),a("code",[t._v("环境名")]),t._v("，所以遇到这样的人，我们要鄙视他，在数据插入数据库之前就检测到，并给他沉重打击。这里熟悉pydantic的同学，都了解，不熟悉的话建议去阅读以下Pydantic的官方文档，或者照着抄就是了。")]),t._v(" "),a("p",[t._v("大体意思就是定义了一个Environment的表单，里面有3个参数: id、name、remarks，对应的就是id，环境名和备注。其中name不能为空，备注随便你，写不写都行，id你也可以不传，不传就默认为None。")]),t._v(" "),a("h3",{attrs:{id:"编写dao层-与db交互的核心内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写dao层-与db交互的核心内容"}},[t._v("#")]),t._v(" 编写Dao层（与db交互的核心内容）")]),t._v(" "),a("ul",[a("li",[t._v("新增环境")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://static.pity.fun/picture/2021-6-19/1624083163017-image.png",alt:""}})]),t._v(" "),a("p",[t._v("由于环境也算配置里面的一套内容，后续要和全局变量放到一起，所以我们给他归档到config目录下。")]),t._v(" "),a("p",[t._v("来看看这个"),a("code",[t._v("新增环境")]),t._v("的功能都做了啥。")]),t._v(" "),a("p",[t._v("首先固定搭配，这个dddd(懂的都懂)。从数据库拿到一个session，类似于db.cursor()也类似于jdbc里面的getConnection。")]),t._v(" "),a("div",{staticClass:"language-Python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" Session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("接着，根据我们的业务逻辑，虽然咱们数据库设置name为unique，我们还是先查询是否有这个name并且deleted_at=None（删除时间=None 代表未被删除的）的环境数据，如果有的话，我们不继续新增了，返回一个"),a("code",[t._v("提示信息")]),t._v("就行。")]),t._v(" "),a("p",[t._v("否则呢，我们就把数据插到数据库并用session进行提交。如果中途发生异常，我们就该记录日志的记录日志，该返回错误的返回错误。如果没啥问题就返回None，代表"),a("code",[t._v("大吉大利，相安无事")]),t._v("。")]),t._v(" "),a("ul",[a("li",[t._v("编辑环境")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://static.pity.fun/picture/2021-6-19/1624083532190-image.png",alt:""}})]),t._v(" "),a("p",[t._v("套路都是一样的，甚至代码也很接近。但是注意到有个区别，这里调用了update_model方法，这个方法是干啥的哩？")]),t._v(" "),a("p",[t._v("我们知道，更新一条数据，我们除了需要更改的字段以外，还得有更新人和更新时间这2个字段跟着修改。所以我们编写了一套通用的方法，把你传入的data数据，改到query里面，顺便改写一下更新时间和更新人。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://static.pity.fun/picture/2021-6-19/1624083663382-image.png",alt:""}})]),t._v(" "),a("p",[t._v("not_null指的是，只更新非空字段，比如我本来有个数据是abc，你传None进来，我给他改成None了，这样可能会有误会。这里借鉴了gorm，只更新非null的字段。dist代表目标，source代表数据源。")]),t._v(" "),a("ul",[a("li",[t._v("删除环境")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://static.pity.fun/picture/2021-6-19/1624083765265-image.png",alt:""}})]),t._v(" "),a("p",[t._v("其实删除环境，我们这里做的是"),a("code",[t._v("软删除")]),t._v("，所以其实它还是一个update的操作。我们通过id找到对应的数据，把它的deleted_at改成当前时间即可，顺便改一下更新人（留下罪证）。")]),t._v(" "),a("ul",[a("li",[t._v("查询环境")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://static.pity.fun/picture/2021-6-19/1624083852232-image.png",alt:""}})]),t._v(" "),a("p",[t._v("注意，我这儿用的是list_env名称，为啥不是search呢？这里随你的便，我其实是把list和search合体了一下。可以看到我的name参数，如果不是None的时候，它就是个search动作，否则它是一个list操作。")]),t._v(" "),a("p",[t._v("search的根本条件是，deleted_at == None，也就是说不管怎么样，咱们都得保证数据没被删除。")]),t._v(" "),a("div",{staticClass:"language-pYTHON line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    search"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Environment"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ilike"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%{}%"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("format")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v('如果name有传，或者不为""也不为None，那么我们加上对name的模糊查询，等价于'),a("code",[t._v("where name ilike xxxxx")]),t._v("。")]),t._v(" "),a("p",[t._v("最后就是自动分页了，我们查出来的数据很多的话，不可能全部做展示，所以我们需要进行分页。page和size指的就是"),a("code",[t._v("当前页码")]),t._v("和"),a("code",[t._v("一页多少条数据")]),t._v("。")]),t._v(" "),a("p",[t._v("最后咱们通过created_at进行倒序排列，也就是说"),a("code",[t._v("最新创建的在最前面")]),t._v("。返回一个total，就是本次查询查到了多少条数据，以便于前端进行展示。")]),t._v(" "),a("h3",{attrs:{id:"编写router"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写router"}},[t._v("#")]),t._v(" 编写router")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://static.pity.fun/picture/2021-6-19/1624084170862-image.png",alt:""}})]),t._v(" "),a("p",[t._v("router层很简单，通过ApiRouter新建路由，并把list/insert/update/delete方法注册到路由。可以看到基本上代码量很少，属于调用dao层的核心方法，根据返回结果来返回http response。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://static.pity.fun/picture/2021-6-19/1624084248255-image.png",alt:""}})]),t._v(" "),a("p",[t._v("值得注意的是，我没有用restful api去写接口，所以udpate/insert都是post请求，其他是get请求。（未出现put delete）")]),t._v(" "),a("h3",{attrs:{id:"注册router"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注册router"}},[t._v("#")]),t._v(" 注册router")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://static.pity.fun/picture/2021-6-19/1624084332083-image.png",alt:""}})]),t._v(" "),a("p",[t._v("最后把刚才编写的router注册到app(pity)就可以了。")]),t._v(" "),a("p",[t._v("剧透下效果:")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://static.pity.fun/picture/2021-6-19/1624084478291-image.png",alt:""}})]),t._v(" "),a("blockquote",[a("p",[t._v("本期内容就到这里了，不水文虽然少点乐趣，但是hin充实呀！下一期以前端怎么curd为主，各位观众姥爷，拜了个拜！")])])])}),[],!1,null,null,null);a.default=_.exports}}]);