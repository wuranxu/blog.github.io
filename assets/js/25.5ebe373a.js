(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{436:function(t,s,a){"use strict";a.r(s);var _=a(2),p=Object(_.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"从flask到fastapi"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从flask到fastapi"}},[t._v("#")]),t._v(" 从Flask到FastApi")]),t._v(" "),s("p",[t._v("上次我们已经拿到了FastApi体验卡，并且搭建了一个demo服务。说好的要开始学"),s("code",[t._v("FastApi")]),t._v("，那怎么能从入门到放弃呢？")]),t._v(" "),s("p",[t._v("所以我稍稍看了一下文档，理了一下他里面的门路。所以这篇文章可以算是私货吧，由官方文档加上个人理解组成。我打算先完善比较重要的功能，剩下的到用到的时候再"),s("code",[t._v("切换")]),t._v("就行了。")]),t._v(" "),s("p",[t._v("为了方便大家能从Flask无缝切换到"),s("code",[t._v("FastApi")]),t._v("，我也经过一定的实践，结合自己的项目特意编写了这篇文章，可能有些地方没有考虑到，希望大家见谅。文章有点点长，可以不用一口气看完~留着后面啃也可以！")]),t._v(" "),s("h2",{attrs:{id:"_1-配置项目改造"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-配置项目改造"}},[t._v("#")]),t._v(" 1. 配置项目改造")]),t._v(" "),s("p",[t._v("我们之前会给Flask的"),s("code",[t._v("app")]),t._v("（pity）初始化一个配置:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.pity.fun/picture/2021-4-30/1619768064834-image.png",alt:""}})]),t._v(" "),s("p",[t._v("其实配置"),s("code",[t._v("还有")]),t._v("一种用法，就是直接引入Config类，利用Config.字段去获取配置项，所以我们在原项目里面取配置的方法都要修改。")]),t._v(" "),s("h2",{attrs:{id:"_2-cors跨域修改"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-cors跨域修改"}},[t._v("#")]),t._v(" 2. Cors跨域修改")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.pity.fun/picture/2021-4-30/1619768792546-image.png",alt:""}})]),t._v(" "),s("p",[t._v("Flask"),s("code",[t._v("支持跨域")]),t._v("很简单，引入CORS，将app套进去即可。")]),t._v(" "),s("p",[t._v("其实FastApi也不难，其中官网就有对应的例子:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.pity.fun/picture/2021-4-30/1619768884457-image.png",alt:""}})]),t._v(" "),s("p",[t._v("通过引入FastApi自己封装好的CORSMiddleware，即可达到一样的效果。")]),t._v(" "),s("h2",{attrs:{id:"_3-支持debug"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-支持debug"}},[t._v("#")]),t._v(" 3. 支持Debug")]),t._v(" "),s("p",[t._v("因为按照我们上一篇的内容，我们通过"),s("code",[t._v("uvicorn")]),t._v("启动了FastApi服务，但是由于我们是在终端(Terminal)运行的，所以其实打的"),s("code",[t._v("断点")]),t._v("是无法起作用的，所以我们需要通过运行main.py来达到调试的目的，官网也有类似的教程。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.pity.fun/picture/2021-4-30/1619769101371-image.png",alt:""}})]),t._v(" "),s("p",[t._v("首先导入uvicorn库，然后通过uvicorn.run来运行对应的"),s("code",[t._v("app")]),t._v("，我经常提到的app，其实是一个FastApi的实例的概念。虽然我给他取名叫"),s("code",[t._v("pity")]),t._v("，但是我有时候也会叫他"),s("code",[t._v("app")]),t._v("，希望不要给大家带来困扰。")]),t._v(" "),s("p",[t._v("注意，我这边run方法接受了4个参数，host和port就不多说了，dddd。")]),t._v(" "),s("p",[t._v("reload呢，就是热更新的意思。")]),t._v(" "),s("p",[t._v("至于app='main:pity'，main代表的是这个文件的名字: main.py，pity也就是app的名字。"),s("code",[t._v("main:pity")]),t._v("即代表当前要启动的是main里面的pity。")]),t._v(" "),s("p",[t._v("至于为什么要这么复杂，归根结底还是这个"),s("code",[t._v("reload")]),t._v("参数，为了能热更新，它需要这些信息，不然会报错:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.pity.fun/picture/2021-4-30/1619769619001-image.png",alt:""}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.pity.fun/picture/2021-4-30/1619769644213-image.png",alt:""}})]),t._v(" "),s("p",[t._v("所以，都是被逼的。")]),t._v(" "),s("h2",{attrs:{id:"_4-flask-sqlalchemy变更"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-flask-sqlalchemy变更"}},[t._v("#")]),t._v(" 4. Flask-Sqlalchemy变更")]),t._v(" "),s("p",[t._v("其实这个不太属于这块内容，因为有的人甚至没有用到这个模块。")]),t._v(" "),s("p",[s("strong",[t._v("用sqlalchemy的同学可以跳过哦！")])]),t._v(" "),s("p",[t._v("其实解决方法呢，就是换成sqlalchemy。所以我们需要按照sqlalchemy的格式去编写ORM。")]),t._v(" "),s("ul",[s("li",[t._v("修改models/"),s("strong",[t._v("init")]),t._v(".py")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.pity.fun/picture/2021-4-30/1619769813814-image.png",alt:""}})]),t._v(" "),s("p",[t._v("可以看到我这边读取链接URL，是通过Config来直接获取的。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("改造models/user.py")]),t._v(" "),s("p",[t._v("随便以user.py为例子：")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.pity.fun/picture/2021-4-30/1619769894652-image.png",alt:""}})]),t._v(" "),s("p",[t._v("构造函数可不变，Use类继承的对象就是models/"),s("strong",[t._v("init")]),t._v(".py里面的Base类，需要注意的是: sqlalchemy需要__tablename__这样一个字段，所以我们需要给它加上，"),s("code",[t._v("它不会默认生成，不加就报错")]),t._v("。其他地方基本上没有差异。")]),t._v(" "),s("ul",[s("li",[t._v("改写增删改查部分")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.pity.fun/picture/2021-4-30/1619770028777-image.png",alt:""}})]),t._v(" "),s("p",[t._v("以"),s("code",[t._v("注册用户")]),t._v("为例，改写方法是去掉以前的"),s("s",[t._v("User.query.filter_by()")]),t._v("，改为"),s("code",[t._v("session.query(User).filter_by()")]),t._v("，其他的时候差距不大。")]),t._v(" "),s("p",[t._v("注意为什么要用"),s("em",[t._v("with")]),t._v("，因为with执行完毕之后会自动调用__exit__（），也就是会自动"),s("code",[t._v("关闭session")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"_5-参数校验部分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-参数校验部分"}},[t._v("#")]),t._v(" 5. 参数校验部分")]),t._v(" "),s("p",[t._v("FastApi呢，和Pydantic进行了强强结合，虽然这一块我还摸得不是很清楚，不过我暂时可以用起来了。")]),t._v(" "),s("p",[t._v("先看下旧版本的，"),s("code",[t._v("人肉校验器")]),t._v(":")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.pity.fun/picture/2021-4-30/1619770834155-image.png",alt:""}})]),t._v(" "),s("p",[t._v("新版本的话，等于说是把参数校验和业务逻辑"),s("code",[t._v("解耦")]),t._v("了，参数校验放到另外的地方去编写，接口里面只负责处理业务逻辑即可。")]),t._v(" "),s("p",[t._v("新版本接口:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.pity.fun/picture/2021-4-30/1619770922757-image.png",alt:""}})]),t._v(" "),s("p",[t._v("一切的核心都在于这个"),s("code",[t._v("UserDto")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.pity.fun/picture/2021-4-30/1619771325631-image.png",alt:""}})]),t._v(" "),s("p",[t._v("可以看到，我们为UserDto类指定了4个字段，因为都是"),s("code",[t._v("必填项")]),t._v("，所以未加上默认值，如果我们需要email是"),s("code",[t._v("非必填")]),t._v("的，则要改成:")]),t._v(" "),s("div",{staticClass:"language-Python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserDto")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BaseModel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),t._v("\n    password"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),t._v("\n    username"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),t._v("\n    email"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("接着就是具体的校验方法了，由于我们的校验规则很简单，所以对"),s("code",[t._v("所有字段")]),t._v("都是采取的一个方法: "),s("code",[t._v("field_not_empty")])]),t._v(" "),s("p",[t._v("意思是字段不能为空字符串，否则抛出ParamsError，注意这个"),s("code",[t._v("ParamsError")]),t._v("是我自定义的错误类型，它继承了ValueError。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.pity.fun/picture/2021-4-30/1619771225718-image.png",alt:""}})]),t._v(" "),s("ul",[s("li",[s("p",[t._v("进阶")]),t._v(" "),s("p",[t._v("由于我们的字段校验不通过的返回格式是这样的:")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.pity.fun/picture/2021-4-30/1619771547148-image.png",alt:""}})]),t._v(" "),s("p",[t._v("但是这个字段呢，是pydantic帮忙校验好的，所以我们需要添加这么一个方法:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.pity.fun/picture/2021-4-30/1619771707300-image.png",alt:""}})]),t._v(" "),s("p",[t._v("这个方法是针对请求参数校验失败的处理，类似于一个hook，只有请求参数校验失败了，才会走到这个步骤。虽然里面错误信息多，但是我们只取第一条错误信息，不然数据多了展示不方便。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.pity.fun/picture/2021-4-30/1619771918938-image.png",alt:""}})]),t._v(" "),s("p",[t._v("接着我们定义了一个错误字典，目前支持"),s("code",[t._v("missing")]),t._v(","),s("code",[t._v("params")]),t._v("（自己封装的), "),s("code",[t._v("not_allowed")]),t._v("(参数类型不一致)")]),t._v(" "),s("h4",{attrs:{id:"看看效果"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#看看效果"}},[t._v("#")]),t._v(" 看看效果")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.pity.fun/picture/2021-4-30/1619771991622-image.png",alt:""}})]),t._v(" "),s("p",[t._v("这样就完成了参数的校验了！")]),t._v(" "),s("h3",{attrs:{id:"_6-蓝图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-蓝图"}},[t._v("#")]),t._v(" 6. 蓝图")]),t._v(" "),s("p",[t._v("在http请求里，接口分类是很关键的事情，所以蓝图这块我们不能跳过，我们粗略讲一下。其实flask里面我们也只是用来给url分组，那我们这里也完成一样的事情就好了。")]),t._v(" "),s("ul",[s("li",[t._v("编写接口")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.pity.fun/picture/2021-4-30/1619772260355-image.png",alt:""}})]),t._v(" "),s("p",[t._v("APIRouter约等于Blueprint，创建一个APIRouter实例，prefix即url的前缀。")]),t._v(" "),s("p",[t._v("编写接口的时候从@app.route改为@router.post/get即可，变化不大。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("注册router")]),t._v(" "),s("p",[t._v("router的注册也很简单，和之前蓝图注册类似，通过app.include_router方法即可实现:")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.pity.fun/picture/2021-4-30/1619772394996-image.png",alt:""}})]),t._v(" "),s("h2",{attrs:{id:"由于我这里只改造了user下的router-所以其他的未include进来。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#由于我这里只改造了user下的router-所以其他的未include进来。"}},[t._v("#")]),t._v(" 由于我这里只改造了user下的router，所以其他的未include进来。")]),t._v(" "),s("p",[t._v("今天的内容就分享到这里吧，给大家拜个早年吧！祝大家"),s("code",[t._v("假期愉快")]),t._v("。")])])}),[],!1,null,null,null);s.default=p.exports}}]);