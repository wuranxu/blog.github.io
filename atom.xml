<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wuranxu.github.io</id>
    <title>测开酒池肉林</title>
    <updated>2020-09-21T10:55:55.865Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wuranxu.github.io"/>
    <link rel="self" href="https://wuranxu.github.io/atom.xml"/>
    <subtitle>欢迎来到我的小窝~这里不仅有博客，也有日记。</subtitle>
    <logo>https://wuranxu.github.io/images/avatar.png</logo>
    <icon>https://wuranxu.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 测开酒池肉林</rights>
    <entry>
        <title type="html"><![CDATA[react hook]]></title>
        <id>https://wuranxu.github.io/post/react-hook/</id>
        <link href="https://wuranxu.github.io/post/react-hook/">
        </link>
        <updated>2020-09-21T09:38:16.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="背景">🙃背景</h3>
<pre><code>在好奇心的驱使下，还是打开了==react hook==的大门，但是有些东西吧，还是得靠自己琢磨琢磨才能体会。</code></pre>
]]></summary>
        <content type="html"><![CDATA[<h3 id="背景">🙃背景</h3>
<pre><code>在好奇心的驱使下，还是打开了==react hook==的大门，但是有些东西吧，还是得靠自己琢磨琢磨才能体会。
</code></pre>
<!-- more -->
<h3 id="优势">优势</h3>
<pre><code>在react hook里，函数式组件也能有状态管理了。它大概长这样！
</code></pre>
<pre><code class="language-Javascript">import React, {useState, useEffect} from 'react';

export default () =&gt; {
    // count是该函数组件的属性, 初始值是0
    const [count, setCount] = useState(0);

    return (
        &lt;div onClick={()=&gt;setCount(count+1)}&gt;当前点击次数为{count}&lt;/div&gt;
    )
}
</code></pre>
<pre><code>对比以前，可以发现这样写出来简单粗暴，几乎可以说是让我放弃了class的编写，但是我想不明白的是，如果一个组件里面有很多state，岂不是要写很多setXXX. 也可能是我自己的组件太过于耦合了，其实该拆的地方应该要拆。

官方给出的解释就是以下好处: 
</code></pre>
<p>以下内容搬运自掘金: https://juejin.im/post/6844903908335173645</p>
<h3 id="为什么会有-hook">为什么会有 Hook?</h3>
<pre><code>在组件之间复用状态逻辑很难

React 提供了一些方法来实现组件的选择性渲染或复用，如 Render Props、高阶组件 等，但这些方法组成的组件也带来了“嵌套地狱”的问题，复杂了组件的结构，增大了阅读理解代码的难度。React 提供了自定义 Hook 来解决上面提到的问题。


复杂组件变得难以理解
在一些复杂的组件中往往都包含了较多的状态逻辑和方法，如组件常常在 componentDidMount 中获取数据。但是，同时在该生命周期中也包含很多其它的逻辑，如设置事件监听，而之后需在 componentWillUnmount 中清除。一些原本没关联的的代码因为修改了相同的状态而冗杂在一起。当然 React 也引入了 Redux 用来实现状态管理，但这也引入了很多抽象概念，文件也相对应复杂起来。Hook 将组件中相互关联的部分拆分成更小的函数，而并非强制按照生命周期划分。


难以理解的 class
在组件中使用 class 时，开发者必须去理解 JavaScript 中 this 的工作方式，需要处理事件绑定等等，另外，class 还存在不能很好的压缩等问题。Hook 使你在非 class 的情况下可以使用更多的 React 特性。
</code></pre>
<h3 id="我这个初学者的理解手动微笑">我这个初学者的理解（手动微笑）</h3>
<pre><code>我是觉得这个hook给我带来最大的感受就是，一个组件的开发变得更加简单了。第一是因为函数组件本来就显得更简练，第二是可以用useEffect的第二个参数去处理生命周期，比之前的componentDidMount等更为简洁。关于使用方面，其实我自己还在使用dva的connect管理状态，用函数组件connect也能使用，所以暂时体会不到。先稍微记录下自己的感受，后面再更！</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[刷题日记·开篇]]></title>
        <id>https://wuranxu.github.io/post/shua-ti-ri-ji-kai-pian/</id>
        <link href="https://wuranxu.github.io/post/shua-ti-ri-ji-kai-pian/">
        </link>
        <updated>2020-09-18T09:16:49.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://wuranxu.github.io/post-images/1600420645602.png" alt="" loading="lazy"></figure>
<pre><code>记录一下自己的刷题过程，里面可能有大概10%的抄答案，实际上估计刷了60道了吧。

😅说实话，做得多了，确实也慢慢熟练了一些吧。做题也是需要套路的，就好像自己以前s6之前从来不会玩旧版女警，改版以后也不会。有一次在诺克萨斯打排位，黄金分段。当时一级团拿了4杀，出门多一个十字镐，还是打不过对面奥巴马。不敢想象一盘被4个队友怒骂，硬撑到20分钟的场景了。于是我下决心一定要练好女警！

后面看了一些女警的教学，那段时间开始不断练习，之后女警已经成为我拿到手最有把握的英雄了。

做题目也是一样，其实什么事情都是一样，熟能生巧~
</code></pre>
<h3 id="为什么要刷题">为什么要刷题🤣</h3>
<pre><code>有的小伙伴儿可能会有一些疑问，觉得自己只是个测试，为什么要刷题？

但很多时候，就算你是测试甚至不是测开，外边公司也会对数据结构/算法有一定的要求。针对测开/开发来说，面试手撕算法就更加常见了！

根据本人这几年的面试经验来说，项目相关的问题是一方面，另一个很重要的方面就是算法题了。某些公司甚至每面都会有，本人在tx的3面就因为这个败下阵来，然而后悔并没有用~
</code></pre>
<ul>
<li>
<p>诀窍🤥</p>
<ul>
<li>
<p>链表:</p>
<ol>
<li>倒数第N个节点，可以用双指针，通过指针差将慢的指针停留在倒数第N个节点</li>
<li>链表的中间节点，其实也很简单，也是双指针，只不过是快慢指针，快指针一次走2步，慢指针一次走1步，这样快指针走完，慢指针就<mark>留在中间节点</mark>了。</li>
</ol>
<p>这样的套路还有很多，还有看到什么二叉树阿之类的，都别太怕，这也是说给我自己听的。其实做下来的感觉也就是模板套一下（当然只针对easy和部分medium），树就是递归，链表大多是while迭代。</p>
</li>
<li>
<p>HashMap:</p>
<p>很多都是用来临时存储数据，比如<a href="https://leetcode-cn.com/problems/two-sum/">1. 两数之和</a>，就可以用hashmap来解决。</p>
<p>我们用hashmap的时候，可以知道key是不可重复的，很多时候是利用了这样的特点。</p>
</li>
</ul>
</li>
</ul>
<p>--</p>
<p>想起以前一个实况8队友的QQ签名：</p>
<p><mark>上一天自习不难，难的是上一辈自习！</mark></p>
<pre><code>后续我也会继续更新这个刷题过程，一方面是为了继续鞭策自己，另一方面就是为了加深自己对数据结构与算法的印象。加油吧！
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于]]></title>
        <id>https://wuranxu.github.io/post/about/</id>
        <link href="https://wuranxu.github.io/post/about/">
        </link>
        <updated>2020-09-18T08:24:07.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>欢迎来到我的小站呀，很高兴遇见你！🤝</p>
</blockquote>
<h2 id="关于本站">🏠 关于本站</h2>
<p>这是业余时间写东西的一个小网站啦</p>
<h2 id="博主是谁">👨‍💻 博主是谁</h2>
<p>博主是一名测试开发工程师，目前在上海工作。平时喜欢捣鼓些测试相关的开发工作，是个不折不扣的技术宅。</p>
<h2 id="兴趣爱好">⛹ 兴趣爱好</h2>
<p>平时偶尔打打LOL，但是水平一直不怎么好。s3开始就是老黄金了，最近都只打大乱斗。有一起的可以加我一起玩呀~</p>
<p>艾欧尼亚：丶丶君已陌路丶丶</p>
<h2 id="联系我呀">📬 联系我呀</h2>
<p>有想一起交流测试/开发技术的伙伴儿们，可以加群一起呀！<br>
🎧 QQ群号: 450505138</p>
<p>QQ: 619434176(偶尔不在)<br>
微信: <mark>wuranxu</mark></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[写给大家的一个接口测试平台]]></title>
        <id>https://wuranxu.github.io/post/xie-gei-da-jia-de-yi-ge-jie-kou-ce-shi-ping-tai/</id>
        <link href="https://wuranxu.github.io/post/xie-gei-da-jia-de-yi-ge-jie-kou-ce-shi-ping-tai/">
        </link>
        <updated>2020-09-18T08:06:55.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<p>🍦初衷</p>
<p>在2018年的时候，来到这家公司，在领导的规划下，完成了接口测试平台从0到1的建设。可惜的是某些方面还是做的不够好吧~希望能够开发一套较为通用，服务大众的产品。毕竟世界上不只是那些大公司，还有很多才起步但没有合适工具支持的小公司。</p>
</li>
<li>
<p>🍩目前进度</p>
<p>基本上才处于<mark>起步阶段</mark>，也希望自己能够坚持下去吧~</p>
</li>
</ul>
]]></content>
    </entry>
</feed>